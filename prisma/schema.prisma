generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PROD")
}

model Company {
  id           String  @id @default(cuid())
  name         String  @unique
  photo        String?
  address      String? @unique
  email_suffix String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  employee Employee[]
  user     User[]
  vehicle  Vehicle[]
  document Document[]
  bill     Bill[]
  value    Value[]
}

model Project {
  id            String    @id @default(cuid())
  name          String    @unique
  starting_date DateTime
  ending_date   DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  employee Employee[]
  user     User[]
  document Document[]
  bill     Bill[]
  vehicle  Vehicle[]
  value    Value[]
}

model Project_Location {
  id          String   @id @default(cuid())
  district    String
  city        String
  state       String
  postal_code Int?     @unique
  country     String   @default("India")
  esic_code   String?  @unique
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  employee      Employee[]
  vehicle       Vehicle[]
  user          User[]
  payment_field Payment_Field[]
  document      Document[]
  bill          Bill[]
}

model Employee {
  id                String    @id @default(cuid())
  full_name         String
  guardian_name     String
  designation       String?
  skill_type        String    @default("unskilled")
  date_of_birth     DateTime?
  gender            String?
  education         String?
  photo             String?
  employee_code     String    @unique
  uan_no            String    @unique
  esic_id           String    @unique
  mobile            String?   @unique
  status            String    @default("active")
  joining_date      DateTime  @default(now())
  exit_date         DateTime?
  aadhar_number     String?   @unique
  pan_number        String?   @unique
  permanent_address String?   @unique
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  company_id          String?
  company             Company?          @relation(fields: [company_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_id          String?
  project             Project?          @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_location_id String?
  project_location    Project_Location? @relation(fields: [project_location_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  attendance      Attendance[]
  bank_detail     Bank_Details?
  advance_payment Advance_Payment[]
  vehicle         Vehicle?
  document        Document[]
  bill            Bill[]
}

model Bank_Details {
  id             String   @id @default(cuid())
  account_number String   @unique
  ifsc_code      String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  employee_id String   @unique
  employee    Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Attendance {
  id          String   @id @default(cuid())
  date        DateTime
  no_of_hours Int      @default(8)
  present     Boolean  @default(true)
  holiday     Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  employee_id String?
  employee    Employee? @relation(fields: [employee_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Payment_Field {
  id                   String   @id @default(cuid())
  name                 String   @unique
  description          String?
  sort_index           Int?
  is_deduction         Boolean  @default(false)
  service_charge_field Boolean  @default(false)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  percentage_of Payment_Field[] @relation("percentage_of")
  is_percentage Payment_Field[] @relation("percentage_of")

  value            Value[]
  project_location Project_Location[]
}

model Value {
  id         String   @id @default(cuid())
  value      Float
  max_value  Float?
  type       String   @default("fixed")
  value_type String   @default("daily")
  skill_type String   @default("all")
  month      Int
  year       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  payment_field_id String
  payment_field    Payment_Field @relation(fields: [payment_field_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company          Company[]
  project          Project[]

  @@unique([payment_field_id, month, year, value])
}

model User {
  id             String    @id @default(cuid())
  full_name      String
  designation    String
  photo          String?
  email          String    @unique
  last_signed_in DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  role_id             String?
  role                User_Role?        @relation(fields: [role_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  company_id          String?
  company             Company?          @relation(fields: [company_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_id          String?
  project             Project?          @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_location_id String?
  project_location    Project_Location? @relation(fields: [project_location_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  advance_payment Advance_Payment[]
}

model User_Role {
  id         String   @id @default(cuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User[]
}

model Advance_Payment {
  id                    String    @id @default(cuid())
  label                 String
  amount                Float
  credited              Boolean   @default(false)
  confirmation_document String?
  payment_date          DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  user_id     String?
  user        User?     @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  employee_id String?
  employee    Employee? @relation(fields: [employee_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Bill {
  id         String   @id @default(cuid())
  label      String
  amount     Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  employee_id         String?
  employee            Employee?         @relation(fields: [employee_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  company_id          String?
  company             Company?          @relation(fields: [company_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_id          String?
  project             Project?          @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_location_id String?
  project_location    Project_Location? @relation(fields: [project_location_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Document {
  id         String   @id @default(cuid())
  label      String   @unique
  belongs_to String   @default("other")
  path       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  employee_id         String?
  employee            Employee?         @relation(fields: [employee_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  company_id          String?
  company             Company?          @relation(fields: [company_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_id          String?
  project             Project?          @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_location_id String?
  project_location    Project_Location? @relation(fields: [project_location_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  vehicle_id          String?
  vehicle             Vehicle?          @relation(fields: [vehicle_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Vehicle {
  id            String   @id @default(cuid())
  name          String
  number        String
  type          String   @default("car")
  year_bought   Int?
  kms_driven    Int?
  other_details String?
  status        String   @default("active")
  price         Float?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  company_id          String?
  company             Company?          @relation(fields: [company_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_id          String?
  project             Project?          @relation(fields: [project_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  project_location_id String?
  project_location    Project_Location? @relation(fields: [project_location_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  employee_id         String?           @unique
  employee            Employee?         @relation(fields: [employee_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  document Document[]
}
